interrupt模块报告
/*************************************************************/
/mod.rs
init() 分别开始handler和时钟中断的的初始化程序



/*************************************************************/
/context.rs
#[repr(C)]
#[derive(Clone, Copy)]
pub struct Context {
    /// 通用寄存器
    pub x: [usize; 32],
    /// 保存诸多状态位的特权态寄存器
    pub sstatus: Sstatus,
    /// 保存中断地址的特权态寄存器
    pub sepc: usize,
}
进程上下文结构
有一些简单的使用操作
    /// 获取栈指针
    pub fn sp(&self) -> usize
    /// 设置栈指针
    pub fn set_sp(&mut self, value: usize) -> &mut Self 
    /// 获取返回地址
    pub fn ra(&self) -> usize
    /// 设置返回地址
    pub fn set_ra(&mut self, value: usize) -> &mut Self
    pub fn set_arguments(&mut self, arguments: &[usize]) -> &mut Self

    /// 为线程构建初始 `Context`
    pub fn new(
        stack_top: usize,
        entry_point: usize,
        arguments: Option<&[usize]>,
        is_user: bool,
    ) -> Self

/*************************************************************/
/handler.rs
//中断处理程序总入口

/// 处理时钟中断
fn supervisor_timer(context: &mut Context) -> *mut Context {
    timer::tick();  
    PROCESSOR.get().park_current_thread(context);
    PROCESSOR.get().prepare_next_thread()
}

时钟中断发生时调用scheluder进行进程切换



/*************************************************************/
/timer.rs
时钟中断自身到达时的处理程序



