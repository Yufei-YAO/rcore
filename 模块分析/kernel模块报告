kernel模块报告
/*************************************************************/
/mod.rs

/*************************************************************/
/condvar.rs
关于线程可执行的条件变量
#[derive(Default)]
pub struct Condvar {
    /// 所有等待此条件变量的线程
    watchers: Mutex<VecDeque<Arc<Thread>>>,
}
impl Condvar
pub fn wait(&self) 
/// 唤起一个等待此条件变量的线程
    pub fn notify_one(&self) 

//目前只有Stdin进行了关于此变量的设置
如果Stdin读不出来东西   -》 self.condvar.wait();  -》 PROCESSOR.get().sleep_current_thread() 
//syscall执行在中断中，然后根据返回值的会决定下一步是否切换线程


/*************************************************************/
/syscall.rs
系统调用入口
/// 系统调用在内核之内的返回值
pub(super) enum SyscallResult {
    /// 继续执行，带返回值
    Proceed(isize),
    /// 记录返回值，但暂存当前线程
    Park(isize),
    /// 丢弃当前 context，调度下一个线程继续执行
    Kill,
}
pub fn syscall_handler(context: &mut Context) -> *mut Context


现在实现了3种系统调用


/*************************************************************/
/process.rs
线程关闭的系统调用
pub(super) fn sys_exit(code: usize) -> SyscallResult


/*************************************************************/
/fs.rs
/// 从指定的文件中读取字符
///
/// 如果缓冲区暂无数据，返回 0；出现错误返回 -1
// todo: inode 放到 process 中去
pub(super) fn sys_read(fd: usize, buffer: *mut u8, size: usize) -> SyscallResult

/// 将字符写入指定的文件
pub(super) fn sys_write(fd: usize, buffer: *mut u8, size: usize) -> SyscallResult